set nocompatible
set encoding=utf-8
set number
syntax on
set cursorline
set t_Co=256
set relativenumber
set incsearch
set smartindent
set linebreak
let mapleader = " "

filetype plugin on
filetype indent on 

set tabstop=4
set shiftwidth=4
set expandtab

if exists('+termguicolors')  
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
endif

set mouse=n
set belloff=all

" Pluggins 
call plug#begin('~/.vim/plugged')

Plug 'morhetz/gruvbox'
Plug 'neoclide/coc.nvim', {'branch':'release'}
Plug 'suan/vim-instant-markdown', {'for':'markdown'}
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
"Plug 'vimwiki/vimwiki'
Plug 'sakshamgupta05/vim-todo-highlight'
Plug 'mbbill/undotree'
Plug 'scrooloose/nerdcommenter'

call plug#end()

" Setting the colorscheme and the background color
let g:gruvbox_contrast_dark = 'hard'
colorscheme gruvbox
set background=dark

" Remaped the jumps bw splited windows 
nnoremap <leader>h :wincmd h<CR>
nnoremap <leader>j :wincmd j<CR>
nnoremap <leader>k :wincmd k<CR>
nnoremap <leader>l :wincmd l<CR>

" Jumping between tabs
nnoremap <leader>, :tabr<CR>
nnoremap <leader>. :tabl<CR>

" nerdcommenter commenting  
map <leader>/ <plug>NERDCommenterToggle

" vimwiki
map <leader>md :InstantMarkdownPreview<CR>
let g:vimwiki_ext2syntax = {'.md':'markdown','.markdown':'markdown','.mdown':'markdown'} "markdown support
let g:instant_markdown_autostart = 0 " disable autostart 

" Opening explorer page on the same pane
nnoremap <leader>m :Ex<CR>
" Explore page on a new pane
nnoremap <leader>pv :wincmd v<bar> :Ex <bar> :vertical resize 30<CR>

" Undotree
nnoremap <leader>u :UndotreeShow<CR>

" Resizing window pane 
nnoremap <silent> <leader>= :vertical resize +5<CR>
nnoremap <silent> <leader>- :vertical resize -5<CR>

" Install extensions when not  
let g:coc_global_extensions = [
            \ 'coc-java',
            \ 'coc-python',
            \ 'coc-json',
            \ 'coc-clangd',
            \ 'coc-sh',
            \]
"-----------------------------------------------------------------------------
" vim todo highlight
"-----------------------------------------------------------------------------

"\'gui_bg_color': '#1d2021' 
let g:todo_highlight_config = {
        \'TODO': {
            \'gui_bg_color': '#ff3300',
            \'gui_fg_color': '#ffffff'
        \},
        \'FIXME': {
            \'gui_bg_color': '#ff6600',
            \'gui_fg_color': '#ffffff'
        \},
        \'NOTE': {
            \'gui_bg_color' : '#00ffff',
            \'gui_fg_color': '#000000'
        \}
    \}

" FIXME:
" NOTE:
" TODO: dkfjdkfj
" NOTE(hell):

" -----------------------------------------------------------------------------
" Airline config
" -----------------------------------------------------------------------------

" enable tabline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#right_sep = ' '
let g:airline#extensions#tabline#righ_alt_sep = '|'

let g:airline#extensions#tabline#formatter = 'unique_tail'

" Always show tabs
set showtabline=2


" -----------------------------------------------------------------------------
" coc.nvim
" -----------------------------------------------------------------------------

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger 
" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
"if exists('*complete_info')
  "inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
"else
  "inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
"endif

" GoTo code navigation.
nmap <silent><leader>gd <Plug>(coc-definition)
nmap <silent><leader>gy <Plug>(coc-type-definition)
nmap <silent><leader>gi <Plug>(coc-implementation)
nmap <silent><leader>gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocActionAsync('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
"autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
"nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
"xmap <leader>f  <Plug>(coc-format-selected)
"nmap <leader>f  <Plug>(coc-format-selected)

"augroup mygroup
  "autocmd!
  "" Setup formatexpr specified filetype(s).
  "autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  "" Update signature help on jump placeholder.
  "autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
"augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
"xmap <leader>a  <Plug>(coc-codeaction-selected)
"nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
"nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
"nmap <leader>qf  <Plug>(coc-fix-current)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
"nmap <silent> <C-s> <Plug>(coc-range-select)
"xmap <silent> <C-s> <Plug>(coc-range-select)

"Add `:Format` command to format current buffer.
"command! -nargs=0 Format :call CocAction('format')

"Add `:Fold` command to fold current buffer.
"command! -nargs=? Fold :call     CocAction('fold', <f-args>)

"Add `:OR` command for organize imports of the current buffer.
"command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
"------------------------------------------------------------------------------------------

"Old colorscheme 
"colorscheme fahrenheit
"let g:airline_theme='fahrenheit' 

